## root

1. 整个应用的根，不是fiber节点
2. 有个属性current，指向上次渲染的fiber树，还有一个属性workInProgress，指向当前正在更新的fiber树

```ts
const HostRoot = 'HostRoot' // root fiber
const ClassComponent = 'ClassComponent'
const HostComponent = 'HostComponent' // div p...
const HostText = 'HostText' // 'xxx'
const FunctionComponent = 'FunctionComponent'

type FiberTag = typeof HostRoot | typeof ClassComponent | typeof HostComponent | typeof HostText | typeof FunctionComponent

const NoFlags = 0
const Placement = 0b10
const Update = 0b100
const Deletion = 0b1000
type FiberEffectTag = typeof NoFlags | typeof Placement | typeof Update | typeof Deletion

class Fiber {
  tag: FiberTag
  key: any
  type: any
  stateNode: any
  child: Fiber | null
  sibling: Fiber | null
  return: Fiber | null
  index: number
  memoizedState: any
  memoizedProps: any
  pendingProps: any
  effectTag: FiberEffectTag
  firstEffect: any
  lastEffect: any
  nextEffect: any
  alternate: Fiber | null
  constructor(tag: FiberTag, key: any, pendingProps: any) {
    this.tag = tag // 表示当前fiber类型 （原生DOM类型、Text类型、Function、Class）
    this.key = key

    this.type = null // 真实dom类型 div p 'xxx'文本类型 Class Function
    this.stateNode = null // fiber实例，document.createXXXNode、new Class()

    this.child = null
    this.sibling = null
    this.return = null
    this.index = 0 // {[node, node, node]} 数组类型子节点，会分配一个index标识

    this.memoizedState = null // 当前fiber state链表
    this.memoizedProps = null // props
    this.pendingProps = pendingProps // 表示要更新的props
    this.flags = NoFlags // 当前fiber状态
    this.subTreeFlags = NoFlags // 子树的fiber状态，update阶段通过子树是否有flag从而决定是否进行“递”

    this.firstEffect = null // 链表，指向第一个要更新子节点的fiber
    this.lastEffect = null
    this.nextEffect = null // 表示下一个要更新的子fiber
    this.deletions = null // 需要被移除节点组件从链表

    this.alternate = null // workInprocess fiber指向对应的current fiber;而current fiber指向对应的workInProgress fiber
    this.updateQueue = null // 收集fiber更新的state
  }
}
```

## 构建缓存树

- 存在current和workInProgress指向的两颗fiber树，update阶段可以考虑复用current.alternate指向的fiber阶段；mount阶段则需要新建

```js
function createWorkInProgress(current, pendingProps) {
  let wip = current.alternate
  if (wip === null) {
    wip = new Fiber(current.tag, current.key, pendingProps)
    wip.stateNode = current.stateNode
    wip.alternate = current
    current.alternate = wip
  } else {
    wip.pendingProps = pendingProps
    wip.flags = NoFlags
    fiber.subTreeFlags = NoFlags
    fiber.deletions = null
  }
  // ...
}
```
